rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    function isUserAuthenticated(uid) {
      return isAuthenticated() && uid == request.auth.uid;
    }
    function isAdmin() {
      return isAuthenticated()
          && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    function isThreadOwner(threadId) {
      return isAuthenticated()
          && get(/databases/$(database)/documents/threads/$(threadId)).data.uid == request.auth.uid;
    }
    function isUndefined(data, field) {
      return !data.keys().hasAll([field]);
    }
    function addOnlyOne(listField) {
      return request.resource.data[listField].hasAll(resource.data[listField])
          && request.resource.data[listField].size() == resource.data[listField].size() + 1
          || isUndefined(resource.data, listField)
          && request.resource.data[listField].size() == 1;
    }
    function removeOnlyOne(listField) {
      return resource.data[listField].removeAll(request.resource.data[listField]).size() == 1;
    }
    function isNewTimestamp(timestampField) {
      return request.resource.data[timestampField] > resource.data[timestampField]
          || isUndefined(resource.data, timestampField);
    }
    function isValidUpdatedAt() {
      return request.resource.data.updatedAt is timestamp
          && isNewTimestamp('updatedAt');
    }
    match /users/{uid} {
      function isValidCreateUser(data) {
        return data.size() == 5
        && 'uid' in data && data.uid is string
        && 'email' in data && data.email is string
        && 'name' in data && data.name is string
        && 'role' in data && data.role is string
        && 'createdAt' in data && data.createdAt is timestamp
      }
      allow get: if isUserAuthenticated(uid);
      allow create: if isValidCreateUser(request.resource.data);
    }
    match /threads/{threadId} {
      function isValidCreateThread(data) {
        return data.keys().hasAll(['id', 'uid', 'title', 'topic', 'gender', 'age', 'place', 'comments', 'createdAt'])
            && data.id is string
            && data.uid is string
            && data.title is string
            && data.topic is string
            && data.gender is string
            && data.age is string
            && data.place is string
            && data.comments is list
            && data.createdAt is timestamp
      }
      function isValidCreateComment(data) {
        return data.diff(resource.data).changedKeys().hasOnly(['commentsCount', 'updatedAt'])
            && data.keys().hasAll(['commentsCount', 'updatedAt'])
            && data.commentsCount is number
            && data.updatedAt is timestamp
            && isNewTimestamp('updatedAt');
      }
      function isValidCommentsDelete(data) {
        return data.keys().hasAll(['commentsCount', 'updatedAt'])
            && data.diff(resource.data).changedKeys().hasOnly(['commentsCount', 'updatedAt'])
            && data.commentsCount is number
            && isValidUpdatedAt();
      }
      function isValidDeleteThread() {
        return isAuthenticated()
            && (request.auth.uid == resource.data.uid
            || isAdmin());
      }
      allow create: if isAuthenticated()
                    && isValidCreateThread(request.resource.data);
      allow get: if true;
      allow list: if true;
      allow update: if isValidCreateComment(request.resource.data);
      allow update: if isValidCommentsDelete(request.resource.data);
      allow delete: if isValidDeleteThread();
      match /comments/{commentIndex} {
        function isValidCreateComment(data) {
          return data.keys().hasOnly(['uid', 'threadId', 'handlename', 'body', 'createdAt', 'index'])
              && data.keys().hasAll(['uid', 'threadId', 'handlename', 'body', 'createdAt', 'index'])
              && data.uid is string
              && data.threadId is string
              && data.handlename is string
              && data.body is string
              && data.createdAt is timestamp
              && data.index is number
        }
        function isValidRemoveComment(data) {
          return data.keys().hasAll(['deletedAt'])
              && data.diff(resource.data).changedKeys().hasOnly(['deletedAt'])
              && data.deletedAt is timestamp
        }
        function isValidSwitchLike(data) {
          return data.keys().hasAll(['likes', 'updatedAt'])
              && data.diff(resource.data).changedKeys().hasOnly(['likes', 'updatedAt'])
              && data.likes is list
              && isValidUpdatedAt()
              && (addOnlyOne('likes') || removeOnlyOne('likes'));
        }
        function isValidCreateReport(data) {
          return data.keys().hasAll(['reports', 'updatedAt'])
              && data.diff(resource.data).changedKeys().hasOnly(['reports', 'updatedAt'])
              && data.reports is list
              && addOnlyOne('reports')
              && isValidUpdatedAt();
        }
        function isValidDeleteReport(data) {
          return data.keys().hasAll(['reports', 'updatedAt'])
              && data.diff(resource.data).changedKeys().hasOnly(['reports', 'updatedAt'])
              && data.reports is list
              && removeOnlyOne('reports')
              && isValidUpdatedAt();
        }
        function isDeleteComments() {
          return isThreadOwner(resource.data.threadId)
              || isAdmin();
        }
        allow create: if isValidCreateComment(request.resource.data);
        allow get: if true;
        allow list: if true;
        allow update: if isValidRemoveComment(request.resource.data);
        allow update: if isValidSwitchLike(request.resource.data);
        allow update: if isValidCreateReport(request.resource.data);
        allow update: if isValidDeleteReport(request.resource.data);
        allow delete: if isDeleteComments();
        match /reports/{uid} {
          function isGetReports() {
            return isAdmin();
          }
          function isValidCreateReport(data) {
            return data.keys().hasOnly(['threadId', 'index', 'uid', 'body'])
                && data.keys().hasAll(['threadId', 'index', 'uid', 'body'])
                && data.threadId is string
                && data.index is number
                && data.uid is string
                && data.body is string;
          }
          function isDeleteReport() {
            return resource.data.uid == request.auth.uid;
          }
          allow list: if isGetReports();
          allow create: if isValidCreateReport(request.resource.data);
          allow delete: if isDeleteReport();
        }
      }
    }
  }
}
