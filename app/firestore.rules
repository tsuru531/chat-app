rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    function isUserAuthenticated(uid) {
      return isAuthenticated() && uid == request.auth.uid;
    }
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    match /users/{uid} {
      function isValid(user) {
        return user.size() == 5
        && 'uid' in user && user.uid is string
        && 'email' in user && user.email is string
        && 'name' in user && user.name is string
        && 'role' in user && user.role is string
        && 'createdAt' in user && user.createdAt is timestamp
      }
      allow get: if isUserAuthenticated(uid);
      allow create: if isValid(request.resource.data);
    }
    match /threads/{threadId} {
      function isValidCreateComment(data, resourceData) {
        return data.keys().hasAll(['comments', 'updatedAt'])
            && data.comments.hasAll(resourceData.comments)
            && data.comments.size() == resourceData.comments.size() + 1;
      }
      function isValidUpdateComments(data, resourceData) {
        return data.diff(resourceData).changedKeys().hasOnly(['comments'])
            && ((data.comments.hasAll(resourceData.comments)
                && data.comments.size() == resourceData.comments.size() + 1)
              || resourceData.comments.removeAll(data.comments).size() == 1);
      }
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isValidCreateComment(request.resource.data, resource.data)
                    || isValidUpdateComments(request.resource.data, resource.data);
      allow delete: if isAuthenticated()
                    && request.auth.uid == resource.data.uid
                    || isAdmin();
      match /comments/{commentId} {
        function isDeleted(data) {
          return 'deletedAt' in data;
        }
        function isValidCreateComment(data) {
          return data.size() == 8
              && data.keys().hasAll(['id', 'threadId', 'uid', 'handlename', 'content', 'likes', 'reports', 'createdAt'])
              && data.id is string
              && data.threadId is string
              && data.uid is string
              && data.handlename is string
              && data.content is string
              && data.likes is list
              && data.reports is list
              && data.createdAt is timestamp
        }
        function isValidSwitchReport(data, resourceData) {
          return data.diff(resourceData).changedKeys().hasOnly(['reports', 'updatedAt'])
              && data.keys().hasAll(['reports', 'updatedAt'])
              && data.reports is list
              && data.updatedAt is timestamp
              && ( data.reports.size() == resourceData.reports.size() + 1
                || data.reports.size() == resourceData.reports.size() - 1 )
              && data.updatedAt > resourceData.updatedAt
        }
        allow get: if !isDeleted(resource.data);
        allow create: if isValidCreateComment(request.resource.data);
        allow update: if isValidSwitchReport(request.resource.data, resource.data);
      }
    }
  }
}
