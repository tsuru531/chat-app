rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    function isUserAuthenticated(uid) {
      return isAuthenticated() && uid == request.auth.uid;
    }
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    match /users/{uid} {
      function isValidCreateUser(data) {
        return data.size() == 5
        && 'uid' in data && data.uid is string
        && 'email' in data && data.email is string
        && 'name' in data && data.name is string
        && 'role' in data && data.role is string
        && 'createdAt' in data && data.createdAt is timestamp
      }
      allow get: if isUserAuthenticated(uid);
      allow create: if isValidCreateUser(request.resource.data);
    }
    match /threads/{threadId} {
      function isValidCreateThread(data) {
        return data.keys().hasAll(['id', 'uid', 'title', 'topic', 'gender', 'age', 'place', 'comments', 'createdAt'])
            && data.id is string
            && data.uid is string
            && data.title is string
            && data.topic is string
            && data.gender is string
            && data.age is string
            && data.place is string
            && data.comments is list
            && data.createdAt is timestamp
      }
      function isValidCreateComment(data) {
        return data.diff(resource.data).changedKeys().hasOnly(['commentsCount', 'updatedAt'])
            && data.keys().hasAll(['commentsCount', 'updatedAt'])
            && data.commentsCount is number
            && data.updatedAt is timestamp
            && data.updatedAt > resource.data.updatedAt;
      }
      allow create: if isAuthenticated()
                    && isValidCreateThread(request.resource.data);
      allow get: if true;
      allow list: if true;
      allow update: if isValidCreateComment(request.resource.data);
      allow delete: if isAuthenticated()
                    && request.auth.uid == resource.data.uid
                    || isAdmin();
      match /comments/{index} {
        function isValidCreateComment(data) {
          return data.keys().hasOnly(['uid', 'threadId', 'handlename', 'body', 'createdAt', 'index'])
              && data.keys().hasAll(['uid', 'threadId', 'handlename', 'body', 'createdAt', 'index'])
              && data.uid is string
              && data.threadId is string
              && data.handlename is string
              && data.body is string
              && data.createdAt is timestamp
              && data.index is number
        }
        function isValidRemoveComment(data) {
          return data.keys().hasAll(['deletedAt'])
              && data.diff(resource.data).changedKeys().hasOnly(['deletedAt'])
              && data.deletedAt is timestamp
        }
        allow create: if isValidCreateComment(request.resource.data);
        allow get: if true;
        allow list: if true;
        allow update: if isValidRemoveComment(request.resource.data);
      }
    }
  }
}
