rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    function isUserAuthenticated(uid) {
      return isAuthenticated() && uid == request.auth.uid;
    }
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    match /users/{uid} {
      function isValid(user) {
        return user.size() == 5
        && 'uid' in user && user.uid is string
        && 'email' in user && user.email is string
        && 'name' in user && user.name is string
        && 'role' in user && user.role is string
        && 'createdAt' in user && user.createdAt is timestamp
      }
      allow get: if isUserAuthenticated(uid);
      allow create: if isValid(request.resource.data);
    }
    match /threads/{threadId} {
      function isValidCreateComment(data, resourceData) {
        return data.keys().hasAll(['comments', 'updatedAt'])
            && data.comments.size() == resourceData.comments.size() + 1
      }
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isValidCreateComment(request.resource.data, resource.data);
      allow delete: if isAuthenticated()
                    && request.auth.uid == resource.data.uid
                    || isAdmin();
      match /comments/{commentId} {
        function isValidCreateComment(data) {
          return data.size() == 7
              && data.keys().hasAll(['id', 'threadId', 'uid', 'handlename', 'content', 'reports', 'createdAt'])
              && data.id is string
              && data.threadId is string
              && data.uid is string
              && data.handlename is string
              && data.content is string
              && data.reports is list
              && data.createdAt is timestamp
        }
        allow create: if isValidCreateComment(request.resource.data);
      }
    }
    match /comments/{commentId} {
      function isThreadOwner(uid) {
        return uid == get(/databases/$(database)/documents/threads/$(resource.data.threadId)).data.uid
      }
      allow read: if true;
      allow update: if isAuthenticated()
                    && isValid(request.resource.data)
                    && request.resource.data.id == resource.data.id
                    && request.resource.data.uid == resource.data.uid
                    && request.resource.data.threadId == resource.data.threadId
                    && request.resource.data.handlename == resource.data.handlename
                    && request.resource.data.index == resource.data.index
                    && request.resource.data.content == resource.data.content
                    && request.resource.data.createdAt == resource.data.createdAt
                    && request.resource.data.updatedAt > resource.data.updatedAt;
      allow delete: if isAuthenticated()
                    && isThreadOwner(request.auth.uid)
                    || isAdmin();
    }
    match /likes/{id} {
      function isValid(data) {
        return data.size() == 6
        && 'id' in data && data.id is string
        && 'userId' in data && data.userId is string
        && 'threadId' in data && data.threadId is string
        && 'commentId' in data && data.commentId is string
        && 'createdAt' in data && data.createdAt is timestamp
        && 'updatedAt' in data && data.updatedAt is timestamp
      }
      allow list: if true;
      allow create: if isUserAuthenticated(request.resource.data.userId)
                    && isValid(request.resource.data);
      allow delete: if isAuthenticated()
                    && request.auth.uid == resource.data.userId;
    }
  }
}
