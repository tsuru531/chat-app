rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    function isUserAuthenticated(uid) {
      return isAuthenticated() && uid == request.auth.uid;
    }
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    match /users/{uid} {
      function isValid(user) {
        return user.size() == 5
        && 'uid' in user && user.uid is string
        && 'email' in user && user.email is string
        && 'name' in user && user.name is string
        && 'role' in user && user.role is string
        && 'createdAt' in user && user.createdAt is timestamp
      }
      allow get: if isUserAuthenticated(uid);
      allow create: if isValid(request.resource.data);
    }
    match /threads/{threadId} {
      function isValidCreateThread(data) {
        return data.keys().hasAll(['id', 'uid', 'title', 'topic', 'gender', 'age', 'place', 'comments', 'createdAt'])
            && data.id is string
            && data.uid is string
            && data.title is string
            && data.topic is string
            && data.gender is string
            && data.age is string
            && data.place is string
            && data.comments is list
            && data.createdAt is timestamp
      }
      allow read: if true;
      allow create: if isAuthenticated()
                    && isValidCreateThread(request.resource.data);
      allow delete: if isAuthenticated()
                    && request.auth.uid == resource.data.uid
                    || isAdmin();
    }
  }
}
